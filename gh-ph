#!/usr/bin/env bash

set -e

: "${GH_PH_HISTORY_FENCE:="=== GH HISTORY FENCE ==="}"
: "${GH_PH_HISTORY_FORMAT:="### %H %s%n%n%b%n"}"
: "${GH_PH_HISTORY_FORMAT_FENCE:="=== GH HISTORY FORMAT FENCE ==="}"
: "${GH_PH_PAGER:="bat"}"

function is_vim() {
    local gh_ppid
    gh_ppid="$(ps -o ppid= $PPID)"
    [[ "$(ps -o comm= "$gh_ppid")" =~ ^n?vim$ ]]
}

function render_changes() {
    local target_branch="$1"
    git log --reverse --format="$GH_PH_HISTORY_FORMAT" "$target_branch.."
}

function inject_history() {
    local target_branch="$1"

    local line
    local rendering=0
    local updating_format=0
    while read -r line; do
        if [[ "$rendering" -eq 1 ]] && [[ "$line" != *"$GH_PH_HISTORY_FENCE"* ]]; then
            # Placing format fences inside history fences is not allowed
            continue
        fi
        if [[ "$updating_format" -eq 1 ]] && [[ "$line" != *"$GH_PH_HISTORY_FORMAT_FENCE"* ]]; then
            # All lines are join together. Use %n for line breaks
            GH_PH_HISTORY_FORMAT+="$line"
            printf '%s\n' "$line"
            continue
        fi

        printf '%s\n' "$line"
        case "$line" in
            *"$GH_PH_HISTORY_FENCE"*)
                rendering=$(( 1 - rendering ))
                if [[ "$rendering" -eq 1 ]]; then
                    render_changes "$target_branch"
                fi
                ;;
            *"$GH_PH_HISTORY_FORMAT_FENCE"*)
                updating_format=$(( 1 - updating_format ))
                if [[ "$updating_format" -eq 1 ]]; then
                    GH_PH_HISTORY_FORMAT=''
                fi
                ;;
        esac
    done
}

function pager() {
    case "$GH_PH_PAGER" in
        bat)
            bat -l markdown
            ;;
        *)
            sh -c "$GH_PH_PAGER"
            ;;
    esac
}

PR_DETAILS="$(gh pr view --json baseRefName,body)"
PR_BASE="$(jq -r '.baseRefName' <<<"$PR_DETAILS")"
PR_BODY="$(jq -r '.body' <<<"$PR_DETAILS")"

inject_history "$PR_BASE" <<<"$PR_BODY" | pager

if read -r -n1 -p 'Update pull request body? [y/n] '; then
    printf '\n'
    if [[ "$REPLY" == 'y' ]]; then
        inject_history "$PR_BASE" <<<"$PR_BODY" | gh pr edit --body-file -
    else
        printf 'Aborted\n'
    fi
elif is_vim; then
    printf '\nVim detected\n'
    inject_history "$PR_BASE" <<<"$PR_BODY" | gh pr edit --body-file -
fi
